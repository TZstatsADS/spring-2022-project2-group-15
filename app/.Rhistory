server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1)) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("Month-over-month comparison")
options(repr.plot.width=6, repr.plot.height=3)
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1)) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("Month-over-month comparison")
options(repr.plot.width=12, repr.plot.height=8)
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1)) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("Month-over-month comparison")
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("Month-over-month comparison")
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8)) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Month-over-month comparison")
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Month-over-month comparison")
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Month-over-month comparison") +
scale_x_discrete(limit = c("1", "2", "3"), labels = c("Jan","Feb","Mar"))
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Month-over-month comparison") +
scale_x_discrete(limit = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"),
labels = c("Jan","Feb","Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$Plot1 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
ggplot(data = plt_data, mapping = aes(x = date(End_Date), y = Event_Count)) +
geom_line(color = "blue") +
scale_shape_tableau() +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", limits = as.Date(c("2019-01-01", "2022-12-31"))) +
labs(x = "Date", y = "Number of Events")+
theme(axis.text.x=element_text(angle=90, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Timeline of Number of Events [2019 - 2022]")
})
output$Plot2 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
ggplot(data = data, mapping = aes(x = end_year, color=end_year)) +
geom_bar() +
scale_shape_tableau() +
labs(x = "Year", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Year-over-Year Number of Events")
})
output$Plot3 <- renderPlot({
data = events_data[events_data$Event_Category == input$event_cat & events_data$Event.Borough == input$borough,]
plt_data = setNames(data.frame(table(month(data$End.Date.Time), data$end_year)),c("Month","Year", "Event_Count"))
ggplot(data = plt_data, mapping = aes(x = Month, y = Event_Count, group=Year, color = Year)) +
geom_line(size=1) +
scale_shape_tableau() +
labs(x = "Month", y = "Number of Events")+
theme(axis.text.x=element_text(angle=0, hjust=1)) +
theme(legend.position = c(0.1, 0.8), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("Month-over-month comparison") +
scale_x_discrete(limit = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"),
labels = c("Jan","Feb","Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
expand = c(0, 0))
})
output$Plot4 <- renderPlot({
plt_data = setNames(aggregate(all_time_covid$case_count, list(date(all_time_covid$date_of_interest)), sum), c("Date","Case_Count"))
ggplot(data = plt_data, mapping = aes(x = Date, y = Case_Count)) +
geom_line(size = 1, color = 'maroon') +
scale_shape_tableau() +
labs(x = "Dates", y = "Number of COVID Cases")+
theme(axis.text.x=element_text(angle=0, hjust=1), plot.title = element_text(size = 16, face = "bold")) +
ggtitle("NYC Covid cases Trendline")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
library(dplyr)
library(tidyverse)
library(lubridate)
library(readr)
library(data.table)
library(stringr)
events_data_processing <- function(filelocation) {
data <- read_csv(filelocation)
nrow(data)
str(data)
print("Beginning Data Cleaning")
# Data Cleaning
data[['Start Date/Time']] <- strptime(data[['Start Date/Time']],
format = "%m/%d/%Y %H:%M:%S")
data[['End Date/Time']] <- strptime(data[['End Date/Time']],
format = "%m/%d/%Y %H:%M:%S")
data <- data %>% mutate(end_year = year(data$`End Date/Time`))
## Remove the repeating rows
data2 <- data %>%
distinct()
nrow(data2)
## Keeping 2019 to 2022
data3 = data2[data2$end_year > 2018,]
data3 = data3[data3$end_year < 2023,]
nrow(data3)
## Remove the data with NA event id
data_rm_na_id <- data3 %>%
filter(is.na(`Event ID`) == FALSE)
## Updating Type of event categories
data_use = data_rm_na_id %>%
mutate(`Event Type` = str_trim(`Event Type`))
data_use = data_use %>%
mutate(Event_Category = case_when(
`Event Type` %in% c("Athletic Race / Tour", "Stickball", "Athletic", "Health Fair", "Marathon", "Sport - Youth", "Sport - Adult", "Athletic - Charitable") ~ "Sports Event",
`Event Type` %in% c("Public Program / Exhibitions", "Production Event", "Theater Load in and Load Outs", "Shooting Permit", "Open Culture", "Filming/Photography") ~ "Art Event",
`Event Type` %in% c("Plaza Event", "Plaza Partner Event", "Parade", "Street Event", "Farmers Market", "Sidewalk Sale", "Block Party", "Rally", "Street Festival", "Single Block Festival", "Weekend Walk") ~ "Street-based Events",
`Event Type` %in% c("Press Conference", "Stationary Demonstration") ~ "Gathering Events",
`Event Type` %in% c("Religious Event", "Clean-Up", "Play Streets") ~ "Volunteering Events",
`Event Type` %in% c("Construction", "Embargo", "Rigging Permit", "Miscellaneous") ~ "Other Events",
`Event Type` %in% c("Special Event") ~ "Special Events "
))
data_use = data_use %>%
mutate(Event_Category = ifelse(data_use$`Event Name` %like% "COVID", "Covid Testing Site", Event_Category))
## Event borough stats
borough_stat <- data_use %>%
group_by(`Event Borough`) %>%
summarize(n = n())
print("Data Cleaning Complete")
return(data_use)
}
events_data = events_data_processing("C:/Users/aakan/Downloads/NYC_Permitted_Event_Information.csv")
sum(is.na(events_data$Event_Category))
View(events_data)
names(events_data)
# dropping used columns
drop_columns = c("Event Street Side", "Street Closure Type", "Community Board", "Police Precinct")
events_data = events_data[,!(names(events_data) %in% drop_columns)]
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/last7days-by-modzcta.csv"
covid_data <- read_csv(url(urlfile))
urlfile = "https://raw.githubusercontent.com/nychealth/coronavirus-data/master/totals/data-by-modzcta.csv"
zipcode_borough <- read_csv(url(urlfile))
zipcode_borough = zipcode_borough[!duplicated(zipcode_borough[c(1,3)]),][,c(1,3)]
## Add the labels borough
covid_data1 = merge(x = covid_data, y = zipcode_borough, by.x = "modzcta", by.y = "MODIFIED_ZCTA", all.x = TRUE)
## Covid info by borough
covid_data2 = covid_data1[,c(7,8,12)]
covid_borough <- aggregate(cbind(people_tested = covid_data2$people_tested, people_positive = covid_data2$people_positive), by=list(borough=covid_data2$BOROUGH_GROUP), FUN=sum)
covid_borough = covid_borough %>%
mutate(percentpositivity_7day = round(people_positive/people_tested,5)*100)
## All time covid data
all_time_covid = read.csv('https://data.cityofnewyork.us/resource/rc75-m7u3.csv')
nrow(all_time_covid)
all_time_covid[['date_of_interest']] <- strptime(all_time_covid[['date_of_interest']],
format = "%Y-%m-%dT%H:%M:%S")
## Exporting processed files
write.table(events_data, "../data/events_data.csv", row.names=FALSE, col.names=TRUE, sep=",")
write.table(covid_borough, "../data/covid_borough.csv", row.names=FALSE, col.names=TRUE, sep=",")
write.table(all_time_covid, "../data/all_time_covid.csv", row.names=FALSE, col.names=TRUE, sep=",")
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
View(events_data)
library(shiny)
runApp()
library(shiny)
runApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
