library(dplyr)
library(tidyverse)
library(lubridate)
library(readr)
library(data.table)
library(stringr)
data <- read_csv("C:/Users/aakan/Downloads/NYC_Permitted_Event_Information.csv")
nrow(data)
str(data)
data
data[['Start Date/Time']] <- strptime(data[['Start Date/Time']],
format = "%m/%d/%Y %H:%M:%S")
data[['End Date/Time']] <- strptime(data[['End Date/Time']],
format = "%m/%d/%Y %H:%M:%S")
data <- data %>% mutate(end_year = year(data$`End Date/Time`))
#remove the repeating rows
data2 <- data %>%
distinct()
nrow(data2)
#Keeping 2019 and above years
data3 = data2[data2$end_year > 2018,]
data3 = data3[data3$end_year < 2023,]
nrow(data3)
#remove the data with NA event id
data_rm_na_id <- data3 %>%
filter(is.na(`Event ID`) == FALSE)
#event borough
borough_stat <- data_rm_na_id %>%
group_by(`Event Borough`) %>%
summarize(n = n())
# Updating Type of event categories
data_use = data_rm_na_id %>%
mutate(`Event Type` = str_trim(`Event Type`)) %>%
mutate(Event_Category = ifelse(data_rm_na_id$`Event Name` %like% "COVID", "Covid Testing Site", ""))
data_use = data_use %>%
mutate(Event_Category = case_when(
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Athletic Race / Tour", "Stickball", "Athletic", "Health Fair", "Marathon", "Sport - Youth", "Sport - Adult", "Athletic - Charitable") ~ "Sports Event",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Public Program / Exhibitions", "Production Event", "Theater Load in and Load Outs", "Shooting Permit", "Open Culture", "Filming/Photography") ~ "Art Event",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Plaza Event", "Plaza Partner Event", "Parade", "Street Event", "Farmers Market", "Sidewalk Sale", "Block Party", "Rally", "Street Festival", "Single Block Festival", "Weekend Walk") ~ "Street-based Events",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Press Conference", "Stationary Demonstration") ~ "Gathering Events",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Religious Event", "Clean-Up", "Play Streets") ~ "Volunteering Events",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Construction", "Embargo", "Rigging Permit", "Miscellaneous") ~ "Other Events "
))
data_use = data_use %>%
mutate(Event_Category = ifelse(is.na(Event_Category), "Special Events", Event_Category))
urlfile="https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/last7days-by-modzcta.csv"
covid_data <- read_csv(url(urlfile))
#read in the data about nyc zipcode corresponding borough
#urlfile="https://data.beta.nyc/dataset/0ff93d2d-90ba-457c-9f7e-39e47bf2ac5f/resource/7caac650-d082-4aea-9f9b-3681d568e8a5/download/nyc_zip_borough_neighborhoods_pop.csv"
urlfile = "https://raw.githubusercontent.com/nychealth/coronavirus-data/master/totals/data-by-modzcta.csv"
zipcode_borough <- read_csv(url(urlfile))
zipcode_borough = zipcode_borough[!duplicated(zipcode_borough[c(1,3)]),][,c(1,3)]
#add the labels borough
covid_data1 = merge(x = covid_data, y = zipcode_borough, by.x = "modzcta", by.y = "MODIFIED_ZCTA", all.x = TRUE)
#covid by borough
covid_data2 = covid_data1[,c(7,8,12)]
covid_borough <- aggregate(cbind(people_tested = covid_data2$people_tested, people_positive = covid_data2$people_positive), by=list(borough=covid_data2$BOROUGH_GROUP), FUN=sum)
covid_borough = covid_borough %>%
mutate(percentpositivity_7day = round(people_positive/people_tested,5)*100)
# All time covid data
all_time_covid = read.csv('https://data.cityofnewyork.us/resource/rc75-m7u3.csv')
nrow(all_time_covid)
all_time_covid[['date_of_interest']] <- strptime(all_time_covid[['date_of_interest']],
format = "%Y-%m-%dT%H:%M:%S")
all_time_covid
ggplot(data = all_time_covid, mapping = aes(x = factor(year(date_of_interest)))) + geom_line()
ggplot(data = all_time_covid, mapping = aes(x = factor(year(date_of_interest)))) + geom_bar()
ggplot(data = all_time_covid, mapping = aes(x = factor(year(date_of_interest)), y = case_count)) + geom_line()
ggplot(data = all_time_covid, mapping = aes(x = factor(date_of_interest), y = case_count)) + geom_line()
ggplot(data = all_time_covid, mapping = aes(x = date_of_interest, y = case_count)) + geom_line()
ggplot(data = all_time_covid, aes(x = date_of_interest, y = case_count)) + geom_line()
ggplot(data = all_time_covid, aes(x = date(date_of_interest), y = case_count)) + geom_line()
names(all_time_covid)
library(dplyr)
library(tidyverse)
library(lubridate)
library(readr)
library(data.table)
library(stringr)
data <- read_csv("C:/Users/aakan/Downloads/NYC_Permitted_Event_Information.csv")
nrow(data)
str(data)
data[['Start Date/Time']] <- strptime(data[['Start Date/Time']],
format = "%m/%d/%Y %H:%M:%S")
data[['End Date/Time']] <- strptime(data[['End Date/Time']],
format = "%m/%d/%Y %H:%M:%S")
View(data)
View(data)
data <- data %>% mutate(end_year = year(data$`End Date/Time`))
#remove the repeating rows
data2 <- data %>%
distinct()
nrow(data2)
#Keeping 2019 and above years
data3 = data2[data2$end_year > 2018,]
data3 = data3[data3$end_year < 2023,]
nrow(data3)
#remove the data with NA event id
data_rm_na_id <- data3 %>%
filter(is.na(`Event ID`) == FALSE)
#event borough
borough_stat <- data_rm_na_id %>%
group_by(`Event Borough`) %>%
summarize(n = n())
# Updating Type of event categories
data_use = data_rm_na_id %>%
mutate(`Event Type` = str_trim(`Event Type`)) %>%
mutate(Event_Category = ifelse(data_rm_na_id$`Event Name` %like% "COVID", "Covid Testing Site", ""))
data_use = data_use %>%
mutate(Event_Category = case_when(
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Athletic Race / Tour", "Stickball", "Athletic", "Health Fair", "Marathon", "Sport - Youth", "Sport - Adult", "Athletic - Charitable") ~ "Sports Event",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Public Program / Exhibitions", "Production Event", "Theater Load in and Load Outs", "Shooting Permit", "Open Culture", "Filming/Photography") ~ "Art Event",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Plaza Event", "Plaza Partner Event", "Parade", "Street Event", "Farmers Market", "Sidewalk Sale", "Block Party", "Rally", "Street Festival", "Single Block Festival", "Weekend Walk") ~ "Street-based Events",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Press Conference", "Stationary Demonstration") ~ "Gathering Events",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Religious Event", "Clean-Up", "Play Streets") ~ "Volunteering Events",
Event_Category != "Covid Testing Site" & `Event Type` %in% c("Construction", "Embargo", "Rigging Permit", "Miscellaneous") ~ "Other Events "
))
data_use = data_use %>%
mutate(Event_Category = ifelse(is.na(Event_Category), "Special Events", Event_Category))
data_use$`Event Location`
unique(data_use$`Event Location`)
length(unique(data_use$`Event Location`))
street_address = unique(data_use$`Event Location`)
street_address
street_address = data_use[,`Event Location`]
street_address = data_use[,c(`Event Location`)]
street_address = data_use[,c('Event Location')]
street_address
street_address = street_address[is.na(street_address$`Event Location`) == FALSE,]
street_address = unique(data_use[,c('Event Location')])
nrow(street_address)
street_address = street_address[is.na(street_address$`Event Location`) == FALSE,]
nrow(street_address)
install.packages('rusps')
library(rusps)
street_address
ggplot(data = data_use, mapping = aes(x = factor(end_year))) + geom_bar()
ggplot(data = data_use, mapping = aes(x = `End Date/Time`)) + geom_bar()
source("~/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/doc/Project 2 - Data Preparation - combined.R", echo=TRUE)
ggplot(data = data_use, mapping = aes(x = date(`End Date/Time`))) + geom_bar()
ggplot(data = data_use, mapping = aes(x = date(`End Date/Time`))) + geom_bar()
# Exporting processed files
write.table(data_use, "data_use.csv", row.names=FALSE, col.names=TRUE, sep=",")
write.table(covid_borough, "covid_borough.csv", row.names=FALSE, col.names=TRUE, sep=",")
write.table(all_time_covid, "all_time_covid.csv", row.names=FALSE, col.names=TRUE, sep=",")
events_dataset <- read.csv('../data_use.csv')
getwd()
events_dataset <- read.csv('data_use.csv')
events_dataset
ggplot(data = data_use, mapping = aes(x = date(`End Date/Time`), color = 'blue')) + geom_bar()
ggplot(data = data_use, mapping = aes(x = date(`End Date/Time`))) + geom_bar(color = 'blue')
ggplot(data = data_use, mapping = aes(x = date(`End Date/Time`))) + geom_bar(color = 'green')
ggplot(data = data_use, mapping = aes(x = date(`End Date/Time`))) + geom_bar(color = 'dark green')
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/doc/Shiny')
library(shiny)
runApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/doc/Shiny')
library(shiny)
runApp()
runApp()
library(shiny)
runApp()
runApp()
library(shiny)
runApp()
events_dataset <- read.csv('../data_use.csv')
events_dataset
fluidPage(
titlePanel("Events Summary before, during, and after COVID"),
sidebarPanel(
selectInput('event_cat', 'Events Category', unique(events_dataset$Event_Category))
),
mainPanel(
plotOutput('plot')
)
)
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
events_dataset <- reactive({read.csv('../data_use.csv')})
events_dataset <- reactive({read.csv('../data_use.csv')})
events_dataset
library(shiny)
runApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/doc/Shiny')
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/doc/Shiny')
library(shiny)
runApp()
library(shiny)
runApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
View(events_data)
runApp()
runApp()
runApp()
runApp()
runApp()
data = events_data[events_data$Event_Category == "Gathering Events" & events_data$Event.Borough == "Staten Island",]
data
data = events_data[events_data$Event_Category == "Gathering Events" & events_data$Event.Borough == "Staten Island",]
if nrow(data) != 0:
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
data = events_data[events_data$Event_Category == "Gathering Events" & events_data$Event.Borough == "Staten Island",]
if nrow(data) != 0:
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
nrow(data)
if nrow(data) > 0:
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
if (nrow(data) > 0):
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
if (nrow(data) > 0){
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))}
else {
plt.data = setNames(data.frame((0,0),)c("End_Date","Event_Count"))}
data = events_data[events_data$Event_Category == "Gathering Events" & events_data$Event.Borough == "Staten Island",]
if (nrow(data) > 0){
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))}
else {
plt.data = setNames(data.frame(c(0,0)),c("End_Date","Event_Count"))}
data = events_data[events_data$Event_Category == "Gathering Events" & events_data$Event.Borough == "Staten Island",]
if (nrow(data) > 0){
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))}
else {
print("No Events for current selection")}
if (nrow(data) > 0){
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))}
else {
print("No Events for current selection")}
data = events_data[events_data$Event_Category == "Gathering Events" & events_data$Event.Borough == "Staten Island",]
if (nrow(data) > 0){
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))}
else {
print("No Events for current selection")
}
if (nrow(data) > 0){
plt_data = setNames(data.frame(table(date(data$End.Date.Time))),c("End_Date","Event_Count"))
} else {
print("No Events for current selection")
}
library(shiny)
runApp()
runApp()
runApp()
runApp()
setwd('C:\Users\aakan\Downloads\Shiny test')
library(shiny)
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
install.packages("leaflet")
install.packages("leaflet.extras")
install.packages("magrittr")
install.packages("magrittr")
install.packages("mapview")
install.packages("leafsync")
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
install.packages("shinythemes")
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(tidyverse)
library(shinyWidgets)
library(dplyr)
library(lubridate)
library(tibble)
library(leaflet)
library(fontawesome)
library(jsonlite)
library(RColorBrewer)
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
## divide data into different event types
data_use <- read_csv("events_data.csv")
## divide data into different event types
data_use <- read.csv("events_data.csv")
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
View(map_data)
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
View(map_data)
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:/Users/aakan/Downloads/Shiny test')
library(shiny)
runApp()
setwd('C:\Users\aakan\OneDrive\Documents\Spring 2022\Applied Data Science\GitHub\spring-2022-project2-group-15\app')
library(shiny)
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp(appName = "Project2-ADS")
setwd('C:/Users/aakan/OneDrive/Documents/Spring 2022/Applied Data Science/GitHub/spring-2022-project2-group-15/app')
library(shiny)
runApp()
source('../lib/map_data.R')
warnings()
source('../lib/coloring.R')
